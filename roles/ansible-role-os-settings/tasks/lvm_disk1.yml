---
- name: create primary partition
  parted:
    device: "{{ device_nvme1n1 }}" #param
    number: 1
    label: "gpt"
    part_start: "0%"
    part_end: "100%"
    name: "data"
    state: "present"
  when: no_of_partition is search('1')

- name: create primary partition
  parted:
    device: "{{ device_nvme1n1 }}" #param
    number: 1
    label: "gpt"
    part_start: "1026MiB"
    part_end: "100%"
    name: "data"
    state: "present"
  when: no_of_partition is search('2')

- name: create snapshot partition
  parted:
    device: "{{ device_nvme1n1 }}" #param
    number: 2
    label: "gpt"
    part_start: "0%"
    part_end: "1025MiB"
    name: "snapshot"
    state: "present"
  when: no_of_partition is search('2')

- name: Check if "{{ disk1_mountpoint }}" directory exists
  stat:
    path: "{{ disk1_mountpoint }}"
  register: dir_to_backup

#- name: Create backup if "{{ disk1_mountpoint }}" directory exists
#  archive:
#    path: "{{ disk1_mountpoint }}"
#    dest: /home/opc/home1.tar
#    format: tar
#  when: dir_to_backup.stat.exists and dir_to_backup.stat.isdir == true

- name: Check the contents in "{{ disk1_mountpoint }}"
#  shell: ls -la "{{ disk1_mountpoint }}"
  shell: ls -la / 
  register: home1_contents
  when: dir_to_backup.stat.exists and dir_to_backup.stat.isdir == true
- debug: var=home1_contents.stdout_lines
  when: dir_to_backup.stat.exists and dir_to_backup.stat.isdir == true

- name: Create backup if "{{ disk1_mountpoint }}" directory exists
  shell: cp -a /home1 /home/opc
  register: bkp_home1
  when: dir_to_backup.stat.exists and dir_to_backup.stat.isdir == true
 
- name: task for creating volume group
  lvg:
    vg: "{{ vg_nvme1n1 }}"
    pvs: "{{ pv_nvme1n1p1 }}"   #param
    pesize: "{{ pesize_nvme1n1 }}"  #param
  when: ansible_lvm['vgs']['{{ vg_nvme1n1 }}'] is not defined

- name: Check if Swap is already present
  shell: swapon -s
  register: swap_mount

- name: task for creating logical volume Swap
  lvol:
    vg: "{{ vg_nvme1n1 }}"
    lv: lv_swap
    size: "{{ lv_swap_nvme1n1 }}"      #param
    force: yes
  when: not swap_mount.stdout|length > 0

- name: Make Swap
  shell: mkswap /dev/{{ vg_nvme1n1 }}/lv_swap
  register: mk_swap
  when: not swap_mount.stdout|length > 0

- name: Mount Swap
  shell: swapon -v /dev/{{ vg_nvme1n1 }}/lv_swap
  register: enable_swap
  when: not swap_mount.stdout|length > 0

- name: Check if LV {{ lv_nvme1n1 }} is present
  shell: lvs --noheadings -o devices '/dev/mapper/{{ vg_nvme1n1 }}-{{ lv_nvme1n1 }}' | sed 's/^ *//'
  register: lvm_home1

- name: task for creating logical volume {{ lv_nvme1n1 }}
  lvol:
    vg: "{{ vg_nvme1n1 }}"
    lv: "{{ lv_nvme1n1 }}"
    size: 100%FREE
    force: yes
  when: not lvm_home1.stdout|length > 0
 
- name: Create directory "{{ disk1_mountpoint }}" if does not exist
  file:
    path: "{{ disk1_mountpoint }}"
    state: directory
    mode: '0755'
  when: not lvm_home1.stdout|length > 0

- name: format the xfs filesystem
  filesystem:
    fstype: xfs
    dev: /dev/{{ vg_nvme1n1 }}/{{ lv_nvme1n1 }}
  when: not lvm_home1.stdout|length > 0

- name: Write swap entry in fstab
  mount: name=swap
         src=/dev/{{ vg_nvme1n1 }}/lv_swap
         fstype=swap
         state=present
  when: not swap_mount.stdout|length > 0

- name: Get UUID of {{ lv_nvme1n1 }}
  shell: blkid /dev/{{ vg_nvme1n1 }}/{{ lv_nvme1n1 }} | awk '{print $2}' | xargs
  register: uuid_home1
  when: not lvm_home1.stdout|length > 0

- name: mount the lv on "{{ disk1_mountpoint }}"
  mount:
    path: "{{ disk1_mountpoint }}"
    src: "{{ uuid_home1.stdout }}"
    fstype: xfs
    state: mounted
  when: not lvm_home1.stdout|length > 0

- name: task to extend volume group
  shell: vgextend "{{ vg_nvme1n1 }}" "{{ pv_nvme1n1p2 }}"
  register: ext_vg
  when: no_of_partition is search('2') and ansible_lvm['vgs']['{{ vg_nvme1n1 }}'] is not defined

- name: Restore data on "{{ disk1_mountpoint }}"
  shell: cp -a /home/opc/home1 /
  register: res_home1
  when: dir_to_backup.stat.exists and not lvm_home1.stdout|length > 0

- name: Check directory contents
  shell: ls -ls /
  register: post_res_home1
  when: dir_to_backup.stat.exists and not lvm_home1.stdout|length > 0
- debug: var=post_res_home1.stdout_lines
  when: dir_to_backup.stat.exists and not lvm_home1.stdout|length > 0

#- name: Restore data on /home1
#  unarchive:
#    src: /home/opc/home1.tar
#    dest: /home1
#    remote_src: true
#    extra_opts: [--strip-components=1]
#  when: dir_to_backup.stat.exists and not lvm_home1.stdout|length > 0

- name: Reload Daemon
  shell: systemctl daemon-reload
  register: daemon_reload

#- name: Reboot the system
#  shell: "sleep 5 && reboot"
#  register: reboot
#  async: 900
#  poll: 0

#- name: Wait for the reboot to complete
#  wait_for_connection:
#    connect_timeout: 20
#    sleep: 5
#    delay: 35
#    timeout: 600

- name: Check Hostname and uptime
  shell: hostname;uptime
  register: check_uptime
- debug: var=check_uptime.stdout_lines

